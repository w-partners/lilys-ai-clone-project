{"version":3,"file":"static/js/910.af6ce88b.chunk.js","mappings":"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","sources":["pages/SummaryDetail.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Chip,\n  Button,\n  Divider,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  IconButton,\n  Tooltip,\n  Card,\n  CardContent,\n  Grid,\n  Rating,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Skeleton,\n  Alert,\n  Tabs,\n  Tab,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails\n} from '@mui/material';\nimport {\n  ArrowBack,\n  Download,\n  Share,\n  Edit,\n  Delete,\n  CheckCircle,\n  Timer,\n  FilePresent,\n  Link as LinkIcon,\n  TextFields,\n  Star,\n  ContentCopy,\n  Feedback,\n  ExpandMore,\n  YouTube as YouTubeIcon,\n  Subtitles,\n  Psychology\n} from '@mui/icons-material';\nimport { format } from 'date-fns';\nimport api from '../services/api';\nimport Loading from '../components/common/Loading';\nimport toast from 'react-hot-toast';\n\nconst SummaryDetail = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [summary, setSummary] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [rating, setRating] = useState(0);\n  const [feedback, setFeedback] = useState('');\n  const [shareDialogOpen, setShareDialogOpen] = useState(false);\n  const [shareUrl, setShareUrl] = useState('');\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(0);\n  const [transcript, setTranscript] = useState(null);\n  const [promptResults, setPromptResults] = useState([]);\n\n  useEffect(() => {\n    fetchSummary();\n  }, [id]);\n\n  const fetchSummary = async () => {\n    try {\n      const response = await api.get(`/summaries/${id}`);\n      const summaryData = response.data.data || response.data;\n      setSummary(summaryData);\n      setRating(summaryData?.rating || 0);\n      \n      // Extract transcript and prompt results from metadata\n      if (summaryData.metadata) {\n        // For YouTube videos, transcript is in originalContent\n        if (summaryData.sourceType === 'youtube' && summaryData.originalContent) {\n          setTranscript(summaryData.originalContent);\n        }\n        \n        // Prompt results are stored in metadata.results\n        if (summaryData.metadata.results) {\n          // Convert results object to array format for display\n          const resultsArray = Object.entries(summaryData.metadata.results).map(([key, value]) => ({\n            category: key,\n            name: value.name,\n            content: value.content\n          }));\n          setPromptResults(resultsArray);\n        }\n      }\n    } catch (error) {\n      toast.error('Failed to load summary');\n      navigate('/summaries');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDownload = async () => {\n    try {\n      const response = await api.get(`/summaries/${id}/download`, {\n        responseType: 'blob'\n      });\n      \n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `${summary.title}.pdf`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      \n      toast.success('Summary downloaded successfully');\n    } catch (error) {\n      toast.error('Failed to download summary');\n    }\n  };\n\n  const handleShare = async () => {\n    try {\n      const response = await api.post(`/summaries/${id}/share`);\n      const url = `${window.location.origin}/share/${response.data.data.shareToken}`;\n      setShareUrl(url);\n      setShareDialogOpen(true);\n    } catch (error) {\n      toast.error('Failed to generate share link');\n    }\n  };\n\n  const handleCopyShareLink = () => {\n    navigator.clipboard.writeText(shareUrl);\n    toast.success('Share link copied to clipboard!');\n  };\n\n  const handleDelete = async () => {\n    try {\n      await api.delete(`/summaries/${id}`);\n      toast.success('Summary deleted successfully');\n      navigate('/summaries');\n    } catch (error) {\n      toast.error('Failed to delete summary');\n    }\n  };\n\n  const handleRatingChange = async (newRating) => {\n    setRating(newRating);\n    try {\n      await api.put(`/summaries/${id}/rating`, { rating: newRating });\n      toast.success('Rating saved');\n    } catch (error) {\n      toast.error('Failed to save rating');\n    }\n  };\n\n  const handleFeedbackSubmit = async () => {\n    if (!feedback.trim()) return;\n    \n    try {\n      await api.post(`/summaries/${id}/feedback`, { feedback });\n      toast.success('Feedback submitted. Thank you!');\n      setFeedback('');\n    } catch (error) {\n      toast.error('Failed to submit feedback');\n    }\n  };\n\n  const getSourceIcon = () => {\n    switch (summary?.sourceType) {\n      case 'file': return <FilePresent />;\n      case 'url': return <LinkIcon />;\n      case 'text': return <TextFields />;\n      default: return <FilePresent />;\n    }\n  };\n\n  if (loading) {\n    return <Loading message=\"Loading summary...\" />;\n  }\n\n  if (!summary) {\n    return (\n      <Box>\n        <Alert severity=\"error\">Summary not found</Alert>\n        <Button\n          startIcon={<ArrowBack />}\n          onClick={() => navigate('/summaries')}\n          sx={{ mt: 2 }}\n        >\n          Back to Summaries\n        </Button>\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Header */}\n      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\n        <Box display=\"flex\" alignItems=\"center\" gap={2}>\n          <IconButton onClick={() => navigate('/summaries')}>\n            <ArrowBack />\n          </IconButton>\n          <Typography variant=\"h4\">\n            {summary.title}\n          </Typography>\n        </Box>\n        \n        <Box display=\"flex\" gap={1}>\n          <Tooltip title=\"Download\">\n            <IconButton onClick={handleDownload}>\n              <Download />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Share\">\n            <IconButton onClick={handleShare}>\n              <Share />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Delete\">\n            <IconButton onClick={() => setDeleteDialogOpen(true)}>\n              <Delete />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n\n      <Grid container spacing={3}>\n        {/* Main Content */}\n        <Grid item xs={12} md={8}>\n          <Paper sx={{ p: 3 }}>\n            {/* Tabs for multiple prompt results */}\n            {promptResults.length > 0 ? (\n              <>\n                <Tabs\n                  value={activeTab}\n                  onChange={(e, newValue) => setActiveTab(newValue)}\n                  variant=\"scrollable\"\n                  scrollButtons=\"auto\"\n                  sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}\n                >\n                  {promptResults.map((result, index) => (\n                    <Tab\n                      key={index}\n                      label={result.name || `Summary ${index + 1}`}\n                      icon={<Psychology />}\n                    />\n                  ))}\n                </Tabs>\n                \n                {promptResults.map((result, index) => (\n                  <Box\n                    key={index}\n                    hidden={activeTab !== index}\n                    sx={{ py: 2 }}\n                  >\n                    <Typography variant=\"h6\" gutterBottom>\n                      {result.name || 'Summary'}\n                    </Typography>\n                    <Typography variant=\"body1\" paragraph style={{ whiteSpace: 'pre-wrap' }}>\n                      {result.content || summary.summaryContent}\n                    </Typography>\n                    \n                    {result.keyPoints && result.keyPoints.length > 0 && (\n                      <>\n                        <Divider sx={{ my: 2 }} />\n                        <Typography variant=\"subtitle1\" gutterBottom>\n                          Key Points\n                        </Typography>\n                        <List dense>\n                          {result.keyPoints.map((point, idx) => (\n                            <ListItem key={idx}>\n                              <ListItemIcon>\n                                <CheckCircle color=\"primary\" fontSize=\"small\" />\n                              </ListItemIcon>\n                              <ListItemText primary={point} />\n                            </ListItem>\n                          ))}\n                        </List>\n                      </>\n                    )}\n                  </Box>\n                ))}\n              </>\n            ) : (\n              /* Single summary view */\n              <>\n                <Typography variant=\"h6\" gutterBottom>\n                  Summary\n                </Typography>\n                <Typography variant=\"body1\" paragraph style={{ whiteSpace: 'pre-wrap' }}>\n                  {summary.summaryContent}\n                </Typography>\n\n                {summary.keyPoints && summary.keyPoints.length > 0 && (\n                  <>\n                    <Divider sx={{ my: 3 }} />\n                    <Typography variant=\"h6\" gutterBottom>\n                      Key Points\n                    </Typography>\n                    <List>\n                      {summary.keyPoints.map((point, index) => (\n                        <ListItem key={index}>\n                          <ListItemIcon>\n                            <CheckCircle color=\"primary\" />\n                          </ListItemIcon>\n                          <ListItemText primary={point} />\n                        </ListItem>\n                      ))}\n                    </List>\n                  </>\n                )}\n              </>\n            )}\n            \n            {/* YouTube Transcript Section */}\n            {transcript && (\n              <>\n                <Divider sx={{ my: 3 }} />\n                <Accordion>\n                  <AccordionSummary\n                    expandIcon={<ExpandMore />}\n                    aria-controls=\"transcript-content\"\n                    id=\"transcript-header\"\n                  >\n                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                      <Subtitles color=\"error\" />\n                      <Typography variant=\"h6\">YouTube Transcript</Typography>\n                    </Box>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <Box sx={{ maxHeight: 400, overflow: 'auto' }}>\n                      <Typography\n                        variant=\"body2\"\n                        component=\"pre\"\n                        sx={{\n                          whiteSpace: 'pre-wrap',\n                          fontFamily: 'monospace',\n                          backgroundColor: 'grey.100',\n                          p: 2,\n                          borderRadius: 1\n                        }}\n                      >\n                        {transcript}\n                      </Typography>\n                    </Box>\n                  </AccordionDetails>\n                </Accordion>\n              </>\n            )}\n\n            <Divider sx={{ my: 3 }} />\n\n            {/* Rating & Feedback */}\n            <Box>\n              <Typography variant=\"h6\" gutterBottom>\n                Rate this summary\n              </Typography>\n              <Box display=\"flex\" alignItems=\"center\" gap={2} mb={2}>\n                <Rating\n                  value={rating}\n                  onChange={(event, newValue) => handleRatingChange(newValue)}\n                  size=\"large\"\n                />\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {rating > 0 ? `${rating} out of 5` : 'Not rated yet'}\n                </Typography>\n              </Box>\n              \n              <TextField\n                fullWidth\n                multiline\n                rows={3}\n                placeholder=\"Share your feedback about this summary...\"\n                value={feedback}\n                onChange={(e) => setFeedback(e.target.value)}\n                sx={{ mb: 2 }}\n              />\n              <Button\n                variant=\"outlined\"\n                startIcon={<Feedback />}\n                onClick={handleFeedbackSubmit}\n                disabled={!feedback.trim()}\n              >\n                Submit Feedback\n              </Button>\n            </Box>\n          </Paper>\n        </Grid>\n\n        {/* Sidebar */}\n        <Grid item xs={12} md={4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Details\n              </Typography>\n              \n              <Box display=\"flex\" flexDirection=\"column\" gap={2}>\n                <Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Source Type\n                  </Typography>\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                    {getSourceIcon()}\n                    <Typography variant=\"body1\">\n                      {summary.sourceType.charAt(0).toUpperCase() + summary.sourceType.slice(1)}\n                    </Typography>\n                  </Box>\n                </Box>\n\n                {summary.sourceUrl && (\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Source URL\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      component=\"a\"\n                      href={summary.sourceUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      sx={{ color: 'primary.main', textDecoration: 'none' }}\n                    >\n                      {summary.sourceUrl}\n                    </Typography>\n                  </Box>\n                )}\n\n                <Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    AI Provider\n                  </Typography>\n                  <Chip\n                    label={summary.provider === 'openai' ? 'OpenAI GPT' : 'Google Gemini'}\n                    size=\"small\"\n                  />\n                </Box>\n\n                <Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Processing Time\n                  </Typography>\n                  <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n                    <Timer fontSize=\"small\" />\n                    <Typography variant=\"body1\">\n                      {(summary.processingTime / 1000).toFixed(1)}s\n                    </Typography>\n                  </Box>\n                </Box>\n\n                <Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Created\n                  </Typography>\n                  <Typography variant=\"body1\">\n                    {format(new Date(summary.createdAt), 'PPpp')}\n                  </Typography>\n                </Box>\n\n                {summary.metadata && (\n                  <>\n                    <Divider />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Statistics\n                    </Typography>\n                    \n                    {summary.metadata.wordCount && (\n                      <Box display=\"flex\" justifyContent=\"space-between\">\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          Original Words:\n                        </Typography>\n                        <Typography variant=\"body2\">\n                          {summary.metadata.wordCount.toLocaleString()}\n                        </Typography>\n                      </Box>\n                    )}\n                    \n                    {summary.metadata.summaryWordCount && (\n                      <Box display=\"flex\" justifyContent=\"space-between\">\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          Summary Words:\n                        </Typography>\n                        <Typography variant=\"body2\">\n                          {summary.metadata.summaryWordCount.toLocaleString()}\n                        </Typography>\n                      </Box>\n                    )}\n                    \n                    {summary.metadata.compressionRatio && (\n                      <Box display=\"flex\" justifyContent=\"space-between\">\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          Compression:\n                        </Typography>\n                        <Typography variant=\"body2\">\n                          {Math.round(summary.metadata.compressionRatio * 100)}%\n                        </Typography>\n                      </Box>\n                    )}\n                  </>\n                )}\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Share Dialog */}\n      <Dialog open={shareDialogOpen} onClose={() => setShareDialogOpen(false)}>\n        <DialogTitle>Share Summary</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body2\" paragraph>\n            Anyone with this link can view the summary:\n          </Typography>\n          <TextField\n            fullWidth\n            value={shareUrl}\n            InputProps={{\n              readOnly: true,\n              endAdornment: (\n                <IconButton onClick={handleCopyShareLink}>\n                  <ContentCopy />\n                </IconButton>\n              )\n            }}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShareDialogOpen(false)}>Close</Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>\n        <DialogTitle>Delete Summary</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to delete this summary? This action cannot be undone.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\n          <Button onClick={handleDelete} color=\"error\" variant=\"contained\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default SummaryDetail;"],"names":["SummaryDetail","id","useParams","navigate","useNavigate","summary","setSummary","useState","loading","setLoading","rating","setRating","feedback","setFeedback","shareDialogOpen","setShareDialogOpen","shareUrl","setShareUrl","deleteDialogOpen","setDeleteDialogOpen","activeTab","setActiveTab","transcript","setTranscript","promptResults","setPromptResults","useEffect","fetchSummary","async","response","api","get","summaryData","data","metadata","sourceType","originalContent","results","resultsArray","Object","entries","map","_ref","key","value","category","name","content","error","toast","_jsx","Loading","message","_jsxs","Box","children","display","alignItems","justifyContent","mb","gap","IconButton","onClick","ArrowBack","Typography","variant","title","Tooltip","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove","success","Download","post","location","origin","shareToken","Share","Delete","Grid","container","spacing","item","xs","md","Paper","sx","p","length","_Fragment","Tabs","onChange","e","newValue","scrollButtons","borderBottom","borderColor","result","index","Tab","label","icon","Psychology","hidden","py","gutterBottom","paragraph","style","whiteSpace","summaryContent","keyPoints","Divider","my","List","dense","point","idx","ListItem","ListItemIcon","CheckCircle","color","fontSize","ListItemText","primary","Accordion","AccordionSummary","expandIcon","ExpandMore","Subtitles","AccordionDetails","maxHeight","overflow","component","fontFamily","backgroundColor","borderRadius","Rating","event","newRating","put","handleRatingChange","size","TextField","fullWidth","multiline","rows","placeholder","target","Button","startIcon","Feedback","trim","disabled","Card","CardContent","flexDirection","getSourceIcon","FilePresent","LinkIcon","TextFields","charAt","toUpperCase","slice","sourceUrl","rel","textDecoration","Chip","provider","Timer","processingTime","toFixed","format","Date","createdAt","wordCount","toLocaleString","summaryWordCount","compressionRatio","Math","round","Dialog","open","onClose","DialogTitle","DialogContent","InputProps","readOnly","endAdornment","handleCopyShareLink","navigator","clipboard","writeText","ContentCopy","DialogActions","delete","Alert","severity","mt"],"sourceRoot":""}