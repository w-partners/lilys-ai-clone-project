{"version":3,"file":"static/js/518.d10d5a7c.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Link.js","../node_modules/@mui/icons-material/esm/FileDownload.js","pages/History.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1M8 13h8v-2H8zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5\"\n}), 'Link');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 9h-4V3H9v6H5l7 7zM5 18v2h14v-2z\"\n}), 'FileDownload');","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  Chip,\n  IconButton,\n  Tooltip,\n  TextField,\n  InputAdornment,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Button,\n  CircularProgress\n} from '@mui/material';\nimport {\n  Search as SearchIcon,\n  FilterList as FilterIcon,\n  Visibility as ViewIcon,\n  Delete as DeleteIcon,\n  Download as DownloadIcon,\n  FileDownload as FileIcon,\n  Link as LinkIcon,\n  Refresh as RefreshIcon\n} from '@mui/icons-material';\nimport { useNavigate } from 'react-router-dom';\nimport api from '../services/api';\nimport { format } from 'date-fns';\nimport toast from 'react-hot-toast';\n\nconst History = () => {\n  const [summaries, setSummaries] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [totalItems, setTotalItems] = useState(0);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState('');\n  const [filterProvider, setFilterProvider] = useState('');\n  const [filterSourceType, setFilterSourceType] = useState('');\n  \n  const navigate = useNavigate();\n\n  const fetchSummaries = async () => {\n    try {\n      setLoading(true);\n      \n      const params = {\n        page: page + 1,\n        limit: rowsPerPage\n      };\n      \n      if (filterStatus) params.status = filterStatus;\n      if (filterProvider) params.provider = filterProvider;\n      if (filterSourceType) params.sourceType = filterSourceType;\n      \n      const response = await api.get('/summaries', { params });\n      \n      setSummaries(response.data.summaries || []);\n      setTotalItems(response.data.totalCount || 0);\n    } catch (error) {\n      console.error('Failed to fetch summaries:', error);\n      toast.error('Failed to load summaries');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchSummaries();\n  }, [page, rowsPerPage, filterStatus, filterProvider, filterSourceType]);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleViewSummary = (summaryId) => {\n    navigate(`/summary/${summaryId}`);\n  };\n\n  const handleDeleteSummary = async (summaryId) => {\n    if (!window.confirm('Are you sure you want to delete this summary?')) {\n      return;\n    }\n\n    try {\n      await api.delete(`/summaries/${summaryId}`);\n      toast.success('Summary deleted successfully');\n      fetchSummaries();\n    } catch (error) {\n      toast.error('Failed to delete summary');\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'completed':\n        return 'success';\n      case 'processing':\n        return 'warning';\n      case 'failed':\n        return 'error';\n      default:\n        return 'default';\n    }\n  };\n\n  const getSourceIcon = (sourceType) => {\n    return sourceType === 'file' ? <FileIcon fontSize=\"small\" /> : <LinkIcon fontSize=\"small\" />;\n  };\n\n  return (\n    <Box>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Box>\n          <Typography variant=\"h4\" gutterBottom fontWeight=\"bold\">\n            Summary History\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            View and manage all your AI-generated summaries\n          </Typography>\n        </Box>\n        <Button\n          variant=\"contained\"\n          startIcon={<FileIcon />}\n          onClick={() => navigate('/upload')}\n        >\n          New Upload\n        </Button>\n      </Box>\n\n      <Paper sx={{ p: 3 }}>\n        {/* Filters */}\n        <Box sx={{ display: 'flex', gap: 2, mb: 3, flexWrap: 'wrap' }}>\n          <TextField\n            placeholder=\"Search summaries...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            size=\"small\"\n            sx={{ flex: 1, minWidth: 250 }}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              ),\n            }}\n          />\n          \n          <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n            <InputLabel>Status</InputLabel>\n            <Select\n              value={filterStatus}\n              label=\"Status\"\n              onChange={(e) => setFilterStatus(e.target.value)}\n            >\n              <MenuItem value=\"\">All</MenuItem>\n              <MenuItem value=\"completed\">Completed</MenuItem>\n              <MenuItem value=\"processing\">Processing</MenuItem>\n              <MenuItem value=\"failed\">Failed</MenuItem>\n            </Select>\n          </FormControl>\n\n          <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n            <InputLabel>Provider</InputLabel>\n            <Select\n              value={filterProvider}\n              label=\"Provider\"\n              onChange={(e) => setFilterProvider(e.target.value)}\n            >\n              <MenuItem value=\"\">All</MenuItem>\n              <MenuItem value=\"gemini\">Gemini</MenuItem>\n              <MenuItem value=\"openai\">OpenAI</MenuItem>\n            </Select>\n          </FormControl>\n\n          <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n            <InputLabel>Source</InputLabel>\n            <Select\n              value={filterSourceType}\n              label=\"Source\"\n              onChange={(e) => setFilterSourceType(e.target.value)}\n            >\n              <MenuItem value=\"\">All</MenuItem>\n              <MenuItem value=\"file\">File</MenuItem>\n              <MenuItem value=\"url\">URL</MenuItem>\n            </Select>\n          </FormControl>\n\n          <Tooltip title=\"Refresh\">\n            <IconButton onClick={fetchSummaries}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n\n        {/* Table */}\n        {loading ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>\n            <CircularProgress />\n          </Box>\n        ) : summaries.length > 0 ? (\n          <>\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Title</TableCell>\n                    <TableCell>Source</TableCell>\n                    <TableCell>Provider</TableCell>\n                    <TableCell>Status</TableCell>\n                    <TableCell>Words</TableCell>\n                    <TableCell>Created</TableCell>\n                    <TableCell>Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {summaries.map((summary) => (\n                    <TableRow\n                      key={summary.id}\n                      hover\n                      sx={{ cursor: 'pointer' }}\n                      onClick={() => handleViewSummary(summary.id)}\n                    >\n                      <TableCell>\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                          {getSourceIcon(summary.sourceType)}\n                          <Typography variant=\"body2\" noWrap sx={{ maxWidth: 300 }}>\n                            {summary.title}\n                          </Typography>\n                        </Box>\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant=\"caption\">\n                          {summary.sourceType === 'file' ? summary.fileName : 'URL'}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Chip\n                          label={summary.aiProvider}\n                          size=\"small\"\n                          variant=\"outlined\"\n                          color=\"primary\"\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Chip\n                          label={summary.status}\n                          size=\"small\"\n                          color={getStatusColor(summary.status)}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        {summary.wordCount || '-'}\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant=\"caption\">\n                          {format(new Date(summary.createdAt), 'MMM d, yyyy')}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Box sx={{ display: 'flex', gap: 1 }}>\n                          <Tooltip title=\"View\">\n                            <IconButton\n                              size=\"small\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleViewSummary(summary.id);\n                              }}\n                            >\n                              <ViewIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                          <Tooltip title=\"Download\">\n                            <IconButton\n                              size=\"small\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                // TODO: Implement download\n                                toast.info('Download feature coming soon!');\n                              }}\n                            >\n                              <DownloadIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                          <Tooltip title=\"Delete\">\n                            <IconButton\n                              size=\"small\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleDeleteSummary(summary.id);\n                              }}\n                            >\n                              <DeleteIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                        </Box>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25, 50]}\n              component=\"div\"\n              count={totalItems}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n          </>\n        ) : (\n          <Box sx={{ textAlign: 'center', py: 8 }}>\n            <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n              No summaries found\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n              {filterStatus || filterProvider || filterSourceType\n                ? 'Try adjusting your filters'\n                : 'Upload your first file to get started'}\n            </Typography>\n            <Button\n              variant=\"contained\"\n              startIcon={<FileIcon />}\n              onClick={() => navigate('/upload')}\n              sx={{ mt: 2 }}\n            >\n              Upload File\n            </Button>\n          </Box>\n        )}\n      </Paper>\n    </Box>\n  );\n};\n\nexport default History;"],"names":["createSvgIcon","_jsx","d","History","summaries","setSummaries","useState","loading","setLoading","page","setPage","rowsPerPage","setRowsPerPage","totalItems","setTotalItems","searchTerm","setSearchTerm","filterStatus","setFilterStatus","filterProvider","setFilterProvider","filterSourceType","setFilterSourceType","navigate","useNavigate","fetchSummaries","async","params","limit","status","provider","sourceType","response","api","get","data","totalCount","error","console","toast","useEffect","handleViewSummary","summaryId","getStatusColor","_jsxs","Box","children","sx","display","justifyContent","alignItems","mb","Typography","variant","gutterBottom","fontWeight","color","Button","startIcon","FileIcon","onClick","Paper","p","gap","flexWrap","TextField","placeholder","value","onChange","e","target","size","flex","minWidth","InputProps","startAdornment","InputAdornment","position","SearchIcon","FormControl","InputLabel","Select","label","MenuItem","Tooltip","title","IconButton","RefreshIcon","py","CircularProgress","length","_Fragment","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","map","summary","hover","cursor","id","fontSize","LinkIcon","noWrap","maxWidth","fileName","Chip","aiProvider","wordCount","format","Date","createdAt","stopPropagation","ViewIcon","info","DownloadIcon","window","confirm","delete","success","handleDeleteSummary","DeleteIcon","TablePagination","rowsPerPageOptions","component","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","textAlign","paragraph","mt"],"sourceRoot":""}