{"version":3,"file":"static/js/86.cd8ab42a.chunk.js","mappings":"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","sources":["pages/Upload.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Tab,\n  Tabs,\n  Button,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  LinearProgress,\n  Alert,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  IconButton,\n  Collapse,\n  FormControlLabel,\n  Switch,\n  RadioGroup,\n  Radio,\n  FormLabel,\n  Grid\n} from '@mui/material';\nimport {\n  CloudUpload,\n  Link as LinkIcon,\n  TextFields,\n  InsertDriveFile,\n  Delete,\n  CheckCircle,\n  Error as ErrorIcon,\n  ExpandMore,\n  ExpandLess,\n  Settings\n} from '@mui/icons-material';\nimport { useDropzone } from 'react-dropzone';\nimport { useNavigate } from 'react-router-dom';\nimport { useWebSocket } from '../contexts/WebSocketContext';\nimport api from '../services/api';\nimport toast from 'react-hot-toast';\n\nconst ACCEPTED_FILE_TYPES = {\n  'application/pdf': ['.pdf'],\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],\n  'text/plain': ['.txt'],\n  'text/html': ['.html', '.htm'],\n  'audio/*': ['.mp3', '.wav', '.m4a'],\n  'video/*': ['.mp4', '.avi', '.mov']\n};\n\nconst FileUploadTab = ({ onUploadSuccess }) => {\n  const [files, setFiles] = useState([]);\n  const [uploading, setUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState({});\n  const [showSettings, setShowSettings] = useState(false);\n  const [settings, setSettings] = useState({\n    provider: 'openai',\n    model: 'gpt-3.5-turbo',\n    summaryLength: 'medium',\n    extractKeyPoints: true\n  });\n\n  const onDrop = useCallback((acceptedFiles) => {\n    const newFiles = acceptedFiles.map(file => ({\n      file,\n      id: Math.random().toString(36).substr(2, 9),\n      status: 'pending'\n    }));\n    setFiles(prev => [...prev, ...newFiles]);\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: ACCEPTED_FILE_TYPES,\n    maxSize: 50 * 1024 * 1024 // 50MB\n  });\n\n  const removeFile = (fileId) => {\n    setFiles(files.filter(f => f.id !== fileId));\n  };\n\n  const handleUpload = async () => {\n    setUploading(true);\n    \n    for (const fileItem of files) {\n      if (fileItem.status === 'completed') continue;\n      \n      const formData = new FormData();\n      formData.append('file', fileItem.file);\n      formData.append('options', JSON.stringify(settings));\n\n      try {\n        setFiles(prev => prev.map(f => \n          f.id === fileItem.id ? { ...f, status: 'uploading' } : f\n        ));\n\n        const response = await api.post('/summaries/upload', formData, {\n          headers: { 'Content-Type': 'multipart/form-data' },\n          onUploadProgress: (progressEvent) => {\n            const percentCompleted = Math.round(\n              (progressEvent.loaded * 100) / progressEvent.total\n            );\n            setUploadProgress(prev => ({ ...prev, [fileItem.id]: percentCompleted }));\n          }\n        });\n\n        setFiles(prev => prev.map(f => \n          f.id === fileItem.id ? { ...f, status: 'completed', jobId: response.data.data.jobId } : f\n        ));\n\n        toast.success(`${fileItem.file.name} uploaded successfully!`);\n        onUploadSuccess(response.data.data.jobId);\n      } catch (error) {\n        setFiles(prev => prev.map(f => \n          f.id === fileItem.id ? { ...f, status: 'error' } : f\n        ));\n        toast.error(`Failed to upload ${fileItem.file.name}`);\n      }\n    }\n    \n    setUploading(false);\n  };\n\n  return (\n    <Box>\n      <Box\n        {...getRootProps()}\n        sx={{\n          border: '2px dashed',\n          borderColor: isDragActive ? 'primary.main' : 'grey.400',\n          borderRadius: 2,\n          p: 4,\n          textAlign: 'center',\n          cursor: 'pointer',\n          backgroundColor: isDragActive ? 'action.hover' : 'background.paper',\n          transition: 'all 0.3s'\n        }}\n      >\n        <input {...getInputProps()} />\n        <CloudUpload sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\n        <Typography variant=\"h6\" gutterBottom>\n          {isDragActive ? 'Drop files here' : 'Drag & drop files here'}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n          or click to select files\n        </Typography>\n        <Chip label=\"PDF\" size=\"small\" sx={{ mx: 0.5 }} />\n        <Chip label=\"DOCX\" size=\"small\" sx={{ mx: 0.5 }} />\n        <Chip label=\"TXT\" size=\"small\" sx={{ mx: 0.5 }} />\n        <Chip label=\"Audio\" size=\"small\" sx={{ mx: 0.5 }} />\n        <Chip label=\"Video\" size=\"small\" sx={{ mx: 0.5 }} />\n        <Typography variant=\"caption\" display=\"block\" mt={2} color=\"text.secondary\">\n          Maximum file size: 50MB\n        </Typography>\n      </Box>\n\n      {files.length > 0 && (\n        <Box mt={3}>\n          <Typography variant=\"h6\" gutterBottom>\n            Selected Files ({files.length})\n          </Typography>\n          <List>\n            {files.map((fileItem) => (\n              <ListItem\n                key={fileItem.id}\n                secondaryAction={\n                  fileItem.status === 'pending' && (\n                    <IconButton edge=\"end\" onClick={() => removeFile(fileItem.id)}>\n                      <Delete />\n                    </IconButton>\n                  )\n                }\n              >\n                <ListItemIcon>\n                  {fileItem.status === 'completed' && <CheckCircle color=\"success\" />}\n                  {fileItem.status === 'error' && <ErrorIcon color=\"error\" />}\n                  {(fileItem.status === 'pending' || fileItem.status === 'uploading') && \n                    <InsertDriveFile />}\n                </ListItemIcon>\n                <ListItemText\n                  primary={fileItem.file.name}\n                  secondary={`${(fileItem.file.size / 1024 / 1024).toFixed(2)} MB`}\n                />\n                {fileItem.status === 'uploading' && (\n                  <Box sx={{ width: 100, mr: 2 }}>\n                    <LinearProgress \n                      variant=\"determinate\" \n                      value={uploadProgress[fileItem.id] || 0} \n                    />\n                  </Box>\n                )}\n              </ListItem>\n            ))}\n          </List>\n\n          <Box mt={2}>\n            <Button\n              onClick={() => setShowSettings(!showSettings)}\n              startIcon={showSettings ? <ExpandLess /> : <ExpandMore />}\n              endIcon={<Settings />}\n            >\n              Advanced Settings\n            </Button>\n            \n            <Collapse in={showSettings}>\n              <Paper sx={{ p: 2, mt: 2 }}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={6}>\n                    <FormControl fullWidth>\n                      <InputLabel>AI Provider</InputLabel>\n                      <Select\n                        value={settings.provider}\n                        onChange={(e) => setSettings({ ...settings, provider: e.target.value })}\n                      >\n                        <MenuItem value=\"openai\">OpenAI GPT</MenuItem>\n                        <MenuItem value=\"gemini\">Google Gemini</MenuItem>\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  \n                  <Grid item xs={12} sm={6}>\n                    <FormControl fullWidth>\n                      <InputLabel>Summary Length</InputLabel>\n                      <Select\n                        value={settings.summaryLength}\n                        onChange={(e) => setSettings({ ...settings, summaryLength: e.target.value })}\n                      >\n                        <MenuItem value=\"short\">Short</MenuItem>\n                        <MenuItem value=\"medium\">Medium</MenuItem>\n                        <MenuItem value=\"long\">Long</MenuItem>\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  \n                  <Grid item xs={12}>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={settings.extractKeyPoints}\n                          onChange={(e) => setSettings({ ...settings, extractKeyPoints: e.target.checked })}\n                        />\n                      }\n                      label=\"Extract key points\"\n                    />\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Collapse>\n          </Box>\n\n          <Box mt={3} display=\"flex\" gap={2}>\n            <Button\n              variant=\"contained\"\n              size=\"large\"\n              onClick={handleUpload}\n              disabled={uploading || files.every(f => f.status === 'completed')}\n              startIcon={<CloudUpload />}\n            >\n              Upload and Process\n            </Button>\n            <Button\n              variant=\"outlined\"\n              onClick={() => setFiles([])}\n              disabled={uploading}\n            >\n              Clear All\n            </Button>\n          </Box>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nconst URLTab = ({ onUploadSuccess }) => {\n  const [url, setUrl] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [settings, setSettings] = useState({\n    provider: 'openai',\n    model: 'gpt-3.5-turbo'\n  });\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!url) return;\n\n    setLoading(true);\n    try {\n      const response = await api.post('/summaries/url', {\n        url,\n        options: settings\n      });\n\n      toast.success('URL submitted for processing!');\n      onUploadSuccess(response.data.data.jobId);\n      setUrl('');\n    } catch (error) {\n      toast.error('Failed to process URL');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Box component=\"form\" onSubmit={handleSubmit}>\n      <TextField\n        fullWidth\n        label=\"Enter URL\"\n        placeholder=\"https://example.com/article\"\n        value={url}\n        onChange={(e) => setUrl(e.target.value)}\n        disabled={loading}\n        InputProps={{\n          startAdornment: <LinkIcon sx={{ mr: 1, color: 'text.secondary' }} />\n        }}\n      />\n      \n      <Box mt={3}>\n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\">AI Provider</FormLabel>\n          <RadioGroup\n            row\n            value={settings.provider}\n            onChange={(e) => setSettings({ ...settings, provider: e.target.value })}\n          >\n            <FormControlLabel value=\"openai\" control={<Radio />} label=\"OpenAI GPT\" />\n            <FormControlLabel value=\"gemini\" control={<Radio />} label=\"Google Gemini\" />\n          </RadioGroup>\n        </FormControl>\n      </Box>\n\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        size=\"large\"\n        fullWidth\n        sx={{ mt: 3 }}\n        disabled={!url || loading}\n        startIcon={<LinkIcon />}\n      >\n        {loading ? 'Processing...' : 'Summarize URL'}\n      </Button>\n    </Box>\n  );\n};\n\nconst TextTab = ({ onUploadSuccess }) => {\n  const [text, setText] = useState('');\n  const [title, setTitle] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!text || !title) return;\n\n    setLoading(true);\n    try {\n      const response = await api.post('/summaries/text', {\n        title,\n        text,\n        options: { provider: 'openai' }\n      });\n\n      toast.success('Text submitted for processing!');\n      onUploadSuccess(response.data.data.jobId);\n      setText('');\n      setTitle('');\n    } catch (error) {\n      toast.error('Failed to process text');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Box component=\"form\" onSubmit={handleSubmit}>\n      <TextField\n        fullWidth\n        label=\"Title\"\n        placeholder=\"Enter a title for your text\"\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n        disabled={loading}\n        sx={{ mb: 2 }}\n      />\n      \n      <TextField\n        fullWidth\n        multiline\n        rows={8}\n        label=\"Enter your text\"\n        placeholder=\"Paste or type your text here...\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n        disabled={loading}\n      />\n      \n      <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\" mt={1}>\n        {text.length} characters\n      </Typography>\n\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        size=\"large\"\n        fullWidth\n        sx={{ mt: 3 }}\n        disabled={!text || !title || loading}\n        startIcon={<TextFields />}\n      >\n        {loading ? 'Processing...' : 'Summarize Text'}\n      </Button>\n    </Box>\n  );\n};\n\nconst Upload = () => {\n  const [activeTab, setActiveTab] = useState(0);\n  const navigate = useNavigate();\n  const { subscribe, unsubscribe } = useWebSocket();\n\n  const handleUploadSuccess = (jobId) => {\n    // Subscribe to job updates\n    const handleJobUpdate = (data) => {\n      if (data.progress === 100) {\n        toast.success('Processing completed!');\n        navigate(`/summaries/${data.summaryId}`);\n      }\n    };\n\n    subscribe(`job:${jobId}`, handleJobUpdate);\n    \n    // Cleanup subscription after 5 minutes\n    setTimeout(() => {\n      unsubscribe(`job:${jobId}`, handleJobUpdate);\n    }, 300000);\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h4\" gutterBottom>\n        Upload Content\n      </Typography>\n      <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\n        Upload files, provide URLs, or paste text to generate AI-powered summaries\n      </Typography>\n\n      <Paper sx={{ mt: 3 }}>\n        <Tabs\n          value={activeTab}\n          onChange={(e, newValue) => setActiveTab(newValue)}\n          sx={{ borderBottom: 1, borderColor: 'divider' }}\n        >\n          <Tab label=\"File Upload\" icon={<CloudUpload />} iconPosition=\"start\" />\n          <Tab label=\"From URL\" icon={<LinkIcon />} iconPosition=\"start\" />\n          <Tab label=\"Text Input\" icon={<TextFields />} iconPosition=\"start\" />\n        </Tabs>\n\n        <Box p={3}>\n          {activeTab === 0 && <FileUploadTab onUploadSuccess={handleUploadSuccess} />}\n          {activeTab === 1 && <URLTab onUploadSuccess={handleUploadSuccess} />}\n          {activeTab === 2 && <TextTab onUploadSuccess={handleUploadSuccess} />}\n        </Box>\n      </Paper>\n    </Box>\n  );\n};\n\nexport default Upload;"],"names":["ACCEPTED_FILE_TYPES","FileUploadTab","_ref","onUploadSuccess","files","setFiles","useState","uploading","setUploading","uploadProgress","setUploadProgress","showSettings","setShowSettings","settings","setSettings","provider","model","summaryLength","extractKeyPoints","onDrop","useCallback","acceptedFiles","newFiles","map","file","id","Math","random","toString","substr","status","prev","getRootProps","getInputProps","isDragActive","useDropzone","accept","maxSize","_jsxs","Box","children","sx","border","borderColor","borderRadius","p","textAlign","cursor","backgroundColor","transition","_jsx","CloudUpload","fontSize","color","mb","Typography","variant","gutterBottom","paragraph","Chip","label","size","mx","display","mt","length","List","fileItem","ListItem","secondaryAction","IconButton","edge","onClick","removeFile","fileId","filter","f","Delete","ListItemIcon","CheckCircle","ErrorIcon","InsertDriveFile","ListItemText","primary","name","secondary","toFixed","width","mr","LinearProgress","value","Button","startIcon","ExpandLess","ExpandMore","endIcon","Settings","Collapse","in","Paper","Grid","container","spacing","item","xs","sm","FormControl","fullWidth","InputLabel","Select","onChange","e","target","MenuItem","FormControlLabel","control","Switch","checked","gap","async","formData","FormData","append","JSON","stringify","response","api","post","headers","onUploadProgress","progressEvent","percentCompleted","round","loaded","total","jobId","data","toast","success","error","disabled","every","URLTab","_ref2","url","setUrl","loading","setLoading","component","onSubmit","preventDefault","options","TextField","placeholder","InputProps","startAdornment","LinkIcon","FormLabel","RadioGroup","row","Radio","type","TextTab","_ref3","text","setText","title","setTitle","multiline","rows","TextFields","Upload","activeTab","setActiveTab","navigate","useNavigate","subscribe","unsubscribe","useWebSocket","handleUploadSuccess","handleJobUpdate","progress","summaryId","setTimeout","Tabs","newValue","borderBottom","Tab","icon","iconPosition"],"sourceRoot":""}