import React from 'react';\nimport {\n  Menu,\n  MenuItem,\n  Typography,\n  Box,\n  Divider,\n  IconButton,\n  Badge,\n  Chip,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Button,\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  NotificationsNone as NotificationsNoneIcon,\n  Info as InfoIcon,\n  CheckCircle as CheckCircleIcon,\n  Error as ErrorIcon,\n  Warning as WarningIcon,\n  Clear as ClearIcon,\n} from '@mui/icons-material';\nimport { formatDistanceToNow } from 'date-fns';\nimport { useWebSocket } from '../contexts/WebSocketContext';\n\nconst getNotificationIcon = (type) => {\n  switch (type) {\n    case 'success':\n      return <CheckCircleIcon color=\"success\" />;\n    case 'error':\n      return <ErrorIcon color=\"error\" />;\n    case 'warning':\n      return <WarningIcon color=\"warning\" />;\n    case 'info':\n    default:\n      return <InfoIcon color=\"info\" />;\n  }\n};\n\nconst getNotificationColor = (type) => {\n  switch (type) {\n    case 'success':\n      return 'success';\n    case 'error':\n      return 'error';\n    case 'warning':\n      return 'warning';\n    case 'info':\n    default:\n      return 'info';\n  }\n};\n\nconst NotificationCenter = ({ anchor, open, onClose, notifications }) => {\n  const { removeNotification, clearNotifications } = useWebSocket();\n\n  const handleRemoveNotification = (id) => {\n    removeNotification(id);\n  };\n\n  const handleClearAll = () => {\n    clearNotifications();\n  };\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  return (\n    <Menu\n      anchorEl={anchor}\n      open={open}\n      onClose={onClose}\n      transformOrigin={{ horizontal: 'right', vertical: 'top' }}\n      anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n      PaperProps={{\n        sx: {\n          width: 360,\n          maxHeight: 480,\n          mt: 1,\n        },\n      }}\n    >\n      <Box sx={{ p: 2, pb: 1 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n            Notifications\n            {unreadCount > 0 && (\n              <Badge\n                badgeContent={unreadCount}\n                color=\"error\"\n                sx={{ ml: 1 }}\n              />\n            )}\n          </Typography>\n          <IconButton size=\"small\" onClick={onClose}>\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        </Box>\n        \n        {notifications.length > 0 && (\n          <Button\n            size=\"small\"\n            onClick={handleClearAll}\n            startIcon={<ClearIcon />}\n            sx={{ mt: 1 }}\n          >\n            Clear All\n          </Button>\n        )}\n      </Box>\n\n      <Divider />\n\n      {notifications.length === 0 ? (\n        <Box\n          sx={{\n            p: 4,\n            textAlign: 'center',\n            color: 'text.secondary',\n          }}\n        >\n          <NotificationsNoneIcon sx={{ fontSize: 48, mb: 2, opacity: 0.5 }} />\n          <Typography variant=\"body2\">\n            No notifications yet\n          </Typography>\n        </Box>\n      ) : (\n        <List sx={{ p: 0, maxHeight: 320, overflow: 'auto' }}>\n          {notifications.map((notification, index) => (\n            <React.Fragment key={notification.id}>\n              <ListItem\n                sx={{\n                  alignItems: 'flex-start',\n                  '&:hover': {\n                    bgcolor: 'action.hover',\n                  },\n                }}\n              >\n                <ListItemIcon sx={{ mt: 0.5 }}>\n                  {getNotificationIcon(notification.type)}\n                </ListItemIcon>\n                \n                <ListItemText\n                  primary={\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 0.5 }}>\n                      <Typography variant=\"body2\" sx={{ fontWeight: 600 }}>\n                        {notification.title}\n                      </Typography>\n                      <Chip\n                        label={notification.type}\n                        size=\"small\"\n                        color={getNotificationColor(notification.type)}\n                        variant=\"outlined\"\n                        sx={{ height: 20, fontSize: '0.7rem' }}\n                      />\n                    </Box>\n                  }\n                  secondary={\n                    <Box>\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 0.5 }}>\n                        {notification.message}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.disabled\">\n                        {formatDistanceToNow(notification.timestamp, { addSuffix: true })}\n                      </Typography>\n                    </Box>\n                  }\n                />\n                \n                <IconButton\n                  size=\"small\"\n                  onClick={() => handleRemoveNotification(notification.id)}\n                  sx={{ mt: 0.5 }}\n                >\n                  <CloseIcon fontSize=\"small\" />\n                </IconButton>\n              </ListItem>\n              {index < notifications.length - 1 && <Divider variant=\"inset\" component=\"li\" />}\n            </React.Fragment>\n          ))}\n        </List>\n      )}\n    </Menu>\n  );\n};\n\nexport default NotificationCenter;